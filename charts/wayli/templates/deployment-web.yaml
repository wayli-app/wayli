{{- if .Values.web.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wayli.fullname" . }}-web
  labels:
    {{- include "wayli.labels" . | nindent 4 }}
    app.kubernetes.io/component: web
  {{- with .Values.global.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.web.replicaCount }}
  {{- with .Values.web.updateStrategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "wayli.selectorLabels.web" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "wayli.selectorLabels.web" . | nindent 8 }}
        {{- with .Values.web.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.web.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- include "wayli.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "wayli.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot }}
        runAsUser: {{ .Values.podSecurityContext.runAsUser }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      {{- end }}
      {{- with .Values.web.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      volumes:
        - name: ephemeral
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        {{- with .Values.web.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      initContainers:
        {{- with .Values.web.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "wayli.initContainers.waitForInfrastructure" . | nindent 8 }}
        {{- if .Values.web.initContainers.migrations.enabled }}
        - name: prepare-init-db
          image: {{ include "wayli.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              for file in supabase/migrations/*; do
                filename=$(basename "$file")
                cp -v "$file" "/sql/V${filename}"
              done
          volumeMounts:
            - name: ephemeral
              mountPath: /sql
        - name: prepare-migrate-db
          image: {{ include "wayli.initContainer.flyway.image" . }}
          imagePullPolicy: {{ .Values.web.initContainers.migrations.flywayImage.pullPolicy }}
          env:
            - name: FLYWAY_USER
              value: {{ include "wayli.supabase.dbUser" . | quote }}
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "wayli.supabaseSecretName" . }}
                  key: {{ .Values.supabase.db.postgres.secretKeys.userPasswordKey }}
            - name: DB_HOST
              value: "{{ include "wayli.supabase.dbHost" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            - name: FLYWAY_URL
              value: jdbc:postgresql://$(DB_HOST):{{ include "wayli.supabase.dbPort" . }}/{{ include "wayli.supabase.dbName" . }}
          args:
            - migrate
            - -locations=filesystem:/flyway/sql
            - -schemas=public
            - -baselineOnMigrate=false
            - -validateOnMigrate=false
          volumeMounts:
            - name: ephemeral
              mountPath: /flyway/sql
        {{- end }}
      containers:
        - name: wayli-web
          image: {{ include "wayli.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurityContext.allowPrivilegeEscalation }}
            runAsNonRoot: {{ .Values.containerSecurityContext.runAsNonRoot }}
            runAsUser: {{ .Values.containerSecurityContext.runAsUser }}
            capabilities:
              drop:
                {{- range .Values.containerSecurityContext.capabilities.drop }}
                - {{ . }}
                {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.web.service.targetPort }}
              name: http
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.web.env.nodeEnv | quote }}
            - name: APP_MODE
              value: {{ .Values.web.env.appMode | quote }}
            - name: PUBLIC_TRUSTED_ORIGINS
              value: {{ include "wayli.siteUrl" . | quote }}
            - name: HOST
              value: {{ .Values.web.env.host | quote }}
            - name: PORT
              value: {{ .Values.web.env.port | quote }}
            - name: SUPABASE_URL
              value: {{ include "wayli.supabase.url" . | quote }}
            - name: SUPABASE_ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "wayli.supabaseSecretName" . }}
                  key: {{ .Values.supabase.global.supabase.secretKeys.anonKey }}
            - name: SUPABASE_SERVICE_ROLE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "wayli.supabaseSecretName" . }}
                  key: {{ .Values.supabase.global.supabase.secretKeys.serviceRoleKey }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "wayli.supabaseSecretName" . }}
                  key: {{ .Values.supabase.global.supabase.secretKeys.jwtSecret }}
            {{- if .Values.web.extraEnvVars }}
            {{- toYaml .Values.web.extraEnvVars | nindent 12 }}
            {{- end }}
          {{- if or .Values.web.extraEnvVarsCM .Values.web.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.web.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.web.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.web.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.web.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          {{- with .Values.web.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
            {{- with .Values.web.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.web.livenessProbe.enabled }}
          livenessProbe:
            {{- omit .Values.web.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.web.readinessProbe.enabled }}
          readinessProbe:
            {{- omit .Values.web.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- with .Values.web.lifecycleHooks }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      terminationGracePeriodSeconds: {{ .Values.web.terminationGracePeriodSeconds }}
      restartPolicy: Always
      {{- with .Values.web.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.web.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.web.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
