// web/src/lib/utils/server-translations.ts
// Server-side translation utility for worker environments

interface Translations {
  [key: string]: string;
}

// Server-side translations (subset of full translations for worker use)
const translations: { [lang: string]: Translations } = {
  en: {
    'tripDetection.autoGenerated': 'Trip detected from location patterns: {locationCount} location{plural} visited'
  },
  nl: {
    'tripDetection.autoGenerated': 'Reis gedetecteerd uit locatiepatronen: {locationCount} locatie{plural} bezocht'
  }
};

/**
 * Simple server-side translation function for worker environments
 * @param key - Translation key
 * @param params - Parameters to interpolate
 * @param language - User's language preference (defaults to 'en')
 * @returns Translated string with interpolated parameters
 */
export function translateServer(
  key: string,
  params: { [key: string]: string | number } = {},
  language: string = 'en'
): string {
  // Fallback to English if language not supported
  const lang = translations[language] ? language : 'en';
  const template = translations[lang][key] || translations['en'][key] || key;

  // Simple parameter interpolation
  const result = template.replace(/\{(\w+)\}/g, (match, paramKey) => {
    return params[paramKey]?.toString() || match;
  });
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.log('[translateServer]', { key, template, params, result });
  }
  return result;
}

/**
 * Get plural suffix for location count in different languages
 * @param count - Number of locations
 * @param language - User's language preference
 * @returns Empty string for singular, 's' for English plural, 's' for Dutch plural
 */
export function getPluralSuffix(count: number, language: string = 'en'): string {
  if (count === 1) return '';

  switch (language) {
    case 'en':
      return 's';
    case 'nl':
      return 's'; // Dutch also uses 's' for plural locations
    default:
      return 's';
  }
}
