// web/src/lib/utils/server-translations.ts
// Server-side translation utility for worker environments

import { readFileSync } from 'fs';
import { join } from 'path';

interface Translations {
	[key: string]: string;
}

// Cache for loaded translations
let translationsCache: { [lang: string]: Translations } | null = null;

// Server-side translations (subset of full translations for worker use)
const translations: { [lang: string]: Translations } = {
	en: {
		'tripDetection.autoGenerated':
			'Trip detected from location patterns: {locationCount} location{plural} visited',
		'tripDetection.tripAwayFromHome': 'Trip away from home',
		'tripDetection.tripToCity': 'Trip to {city}',
		'tripDetection.tripToCountry': 'Trip to {country}',
		'tripDetection.tripToMultipleCities': 'Trip to {cities}',
		'tripDetection.tripToMultipleCountries': 'Trip to {countries}'
	},
	nl: {
		'tripDetection.autoGenerated':
			'Reis gedetecteerd uit locatiepatronen: {locationCount} locatie{plural} bezocht',
		'tripDetection.tripAwayFromHome': 'Reis weg van huis',
		'tripDetection.tripToCity': 'Reis naar {city}',
		'tripDetection.tripToCountry': 'Reis naar {country}',
		'tripDetection.tripToMultipleCities': 'Reis naar {cities}',
		'tripDetection.tripToMultipleCountries': 'Reis naar {countries}'
	}
};

/**
 * Load full translations from JSON files (used for country names)
 */
function loadFullTranslations(): { [lang: string]: Translations } {
	if (translationsCache) {
		return translationsCache;
	}

	try {
		const languages = ['en', 'nl', 'es'];
		const result: { [lang: string]: Translations } = {};

		for (const lang of languages) {
			// Try multiple possible paths for translation files
			// 1. Build directory (for worker in Docker)
			// 2. Static directory (for development)
			const possiblePaths = [
				join(process.cwd(), 'build', 'messages', `${lang}.json`),
				join(process.cwd(), 'static', 'messages', `${lang}.json`)
			];

			let loaded = false;
			for (const filePath of possiblePaths) {
				try {
					const fileContent = readFileSync(filePath, 'utf-8');
					result[lang] = JSON.parse(fileContent);
					loaded = true;
					break;
				} catch (err) {
					// Try next path
					continue;
				}
			}

			if (!loaded) {
				console.warn(`Could not load translations for language: ${lang}`);
			}
		}

		translationsCache = result;
		return result;
	} catch (error) {
		console.error('Error loading translations:', error);
		return {};
	}
}

/**
 * Simple server-side translation function for worker environments
 * @param key - Translation key
 * @param params - Parameters to interpolate
 * @param language - User's language preference (defaults to 'en')
 * @returns Translated string with interpolated parameters
 */
export function translateServer(
	key: string,
	params: { [key: string]: string | number } = {},
	language: string = 'en'
): string {
	// Fallback to English if language not supported
	const lang = translations[language] ? language : 'en';
	const template = translations[lang][key] || translations['en'][key] || key;

	// Simple parameter interpolation
	let result = template;
	for (const [paramKey, paramValue] of Object.entries(params)) {
		const placeholder = `{${paramKey}}`;
		result = result.replace(
			new RegExp(placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'),
			paramValue.toString()
		);
	}

	if (process.env.NODE_ENV !== 'production') {
		console.log('[translateServer]', { key, template, params, result });
	}
	return result;
}

/**
 * Get plural suffix for location count in different languages
 * @param count - Number of locations
 * @param language - User's language preference
 * @returns Empty string for singular, 's' for English plural, 's' for Dutch plural
 */
export function getPluralSuffix(count: number, language: string = 'en'): string {
	if (count === 1) return '';

	switch (language) {
		case 'en':
			return 's';
		case 'nl':
			return 's'; // Dutch also uses 's' for plural locations
		default:
			return 's';
	}
}

/**
 * Get country name from country code for server-side use
 * @param countryCode - ISO 3166-1 alpha-2 country code (e.g., 'US', 'FR', 'JP')
 * @param language - User's language preference (defaults to 'en')
 * @returns Translated country name, or the country code if translation not found
 */
export function getCountryNameServer(countryCode: string, language: string = 'en'): string {
	if (!countryCode || countryCode.length !== 2) {
		return countryCode;
	}

	const fullTranslations = loadFullTranslations();
	const lang = fullTranslations[language] ? language : 'en';
	const key = `country.${countryCode.toUpperCase()}`;

	// Try requested language from our translations
	if (fullTranslations[lang] && fullTranslations[lang][key]) {
		return fullTranslations[lang][key];
	}

	// Fallback to English from our translations
	if (fullTranslations['en'] && fullTranslations['en'][key]) {
		return fullTranslations['en'][key];
	}

	// Fallback to Intl.DisplayNames API for countries not in our translations
	try {
		const regionNames = new Intl.DisplayNames([language, 'en'], { type: 'region' });
		const countryName = regionNames.of(countryCode.toUpperCase());
		if (countryName && countryName !== countryCode.toUpperCase()) {
			return countryName;
		}
	} catch (error) {
		console.error(`Error getting country name for ${countryCode}:`, error);
	}

	// Final fallback to country code if all else fails
	return countryCode.toUpperCase();
}
